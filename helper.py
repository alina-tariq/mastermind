import random

def create_code(characters, length):
    '''
    (str, int) --> list

    characters: a string made up of the characters wanted in the list
    length: the length of the list to be made

    This function returns a random list of characters of the length specified
    using the characters in the given string.

    >>>create_code('gbryop', 4)
    ['b', 'b', 'g', 'r']
    '''

    code = []

    for a in range(0, length):
        code.append(random.choice(characters))

    return code


def valid(guess, valid_chars, size):
    '''
    (list, str, int) --> boolean

    guess: list made of single character strs that the user creates
    valid_chars: the characters that the guess should use
    size: the length the guess should be

    The function will return True if all the single character strs present in
    the list are also in the valid_chars string and the list is equal
    in length to the given size (int).

    >>>valid(['g', 'b', 'r', 'r'], 'gbryop', 4)
    True
    '''

    count = 0

    if len(guess) == size:
        for item in guess:
            if item in valid_chars:
                count += 1
    else:
        print('The guess must be ' + str(size) + ' characters long.')
        print(' ')
        return False

    if count == size:
        return True
    else:
        print('The guess can only contain the following letters: roygbiv')
        print(' ')
        return False


def find_fully_correct(answer, guess):
    '''
    (list, list) --> list

    answer: the code generated by the program that the user has to correctly
    identify
    guess: the guess submitted by the user of what they think the answer is

    The function will return a list containing a 'b' for every colour that is
    in the same position in the guess and in the answer code.

    >>>find_fully_correct(['r', 'b', 'g', 'y'], ['o', 'b', 'g', 'r'])
    ['b']
    '''

    length = len(answer)
    feedback = []

    for index in range(0, length):
        if answer[index] == guess[index]:
            feedback.append('b')

    return feedback


def remove_fully_correct(list1, list2):
    '''
    (list, list) --> list

    list1: the first list
    list2: the second list

    This function will return a new list by removing the characters that are
    the same and in the same position in both list1 and list2. The new list
    will contain only the characters from the first list that weren't the same
    but were at the same position in both lists

    >>>remove_fully_correct(['g', 'b', 'o', 'p'], ['g', 'b', 'y', 'r']
    ['o', 'p']
    '''

    length = len(list1)
    new_list = []

    for index in range(0, length):
        if list1[index] != list2[index]:
            new_list.append(list1[index])

    return new_list


def find_colour_correct(answer, guess):
    '''
    (list, list) --> list

    answer: the code generated by the program that the user has to correctly
    identify
    guess: the guess submitted by the user of what they think the answer is

    The function will return a list containing 'w' for every colour that was
    present in both the answer list and the guess list but was in a
    different position in both lists.

    >>>find_colour_correct(['r', 'r', 'b', 'p'], ['o', 'b', 'r', 'y']
    ['w', 'w']
    '''

    re_guess = remove_fully_correct(guess, answer)
    re_answer = remove_fully_correct(answer, guess)

    count = 0
    feedback = []

    for index in range(0, len(re_guess)):
        if re_answer.count(re_guess[index]) >= 1:
            count += 1
            re_answer.remove(re_guess[index])

    for num in range(0, count):
        feedback.append('w')

    return feedback

def print_game(guesses, clues):
    '''
    (list, list) --> combination of both lists

    guesses: all the guesses that the user has submitted in a list
    clues: the corresponding clues, 'b' or 'w', for each guess that the user
    has submitted

    The function ouputs to the screen the guesses the user has made and the
    clues received for each guess. Corresponding guesses and clues are
    separated by a tab. Each guess and clue sublist is printed below the proper
    heading (Guesses or Clues) and on different lines

    >>>print_game(guesses, clues)
    Guesses     Clues
    b b b b     b
    b g g g 	b w
    '''

    print('    Guesses ', end='\t\t')
    print('    Clues ', end='\n')

    for index in range(0, len(guesses)):
        if index < 9:
            guess_front = str(index+1) + ":  "
        else:
            guess_front = str(index+1) + ": "
        print(guess_front + guesses[index], end='\t\t')
        print("    " + clues[index], end='\n')

    print(" ")